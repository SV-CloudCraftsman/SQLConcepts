2.3. Subqueries in SQL
A subquery is a query nested inside another query. Subqueries are used to perform intermediate steps in data retrieval or calculations. They can be classified based on the number of values returned and their dependency on the outer query.

Types of Subqueries
1. Scalar Subquery
Description: Returns a single value (one row and one column).
Use Case: Retrieve a calculated value or a single field value to use in the outer query.
Example:

Scenario: Find employees who earn more than the average salary.
Query:

sql
Copy code
SELECT EmployeeName, Salary
FROM Employees
WHERE Salary > (SELECT AVG(Salary) FROM Employees);
Explanation:

The subquery (SELECT AVG(Salary) FROM Employees) calculates the average salary.
The outer query compares each employee's salary to this value.
2. Multi-row Subquery
Description: Returns multiple rows (but typically a single column).
Use Case: Compare against a set of values using operators like IN, ANY, or ALL.
Example:

Scenario: Retrieve employees working in departments located in New York.
Query:

sql
Copy code
SELECT EmployeeName
FROM Employees
WHERE DepartmentID IN (SELECT DepartmentID FROM Departments WHERE Location = 'New York');
Explanation:

The subquery (SELECT DepartmentID FROM Departments WHERE Location = 'New York') retrieves all department IDs located in New York.
The outer query fetches employees whose DepartmentID matches one of these IDs.
3. Correlated Subquery
Description: A subquery that references columns from the outer query. It is evaluated once for every row processed by the outer query.
Use Case: Use for row-by-row comparisons or calculations.
Example:

Scenario: Retrieve employees whose salaries are higher than the average salary of their respective departments.
Query:

sql
Copy code
SELECT EmployeeName, Salary
FROM Employees E
WHERE Salary > (SELECT AVG(Salary) FROM Employees WHERE DepartmentID = E.DepartmentID);
Explanation:

The subquery (SELECT AVG(Salary) FROM Employees WHERE DepartmentID = E.DepartmentID) calculates the average salary for the department of the current employee (E.DepartmentID).
The outer query compares each employee's salary to the average salary of their department.
Real-Time Use Cases of Subqueries
1. Scalar Subquery
Scenario: Display products with a price higher than the average product price. Query:
sql
Copy code
SELECT ProductName, Price
FROM Products
WHERE Price > (SELECT AVG(Price) FROM Products);
2. Multi-row Subquery
Scenario: Find orders placed by VIP customers (where VIP customers are identified in a separate table). Query:
sql
Copy code
SELECT OrderID, CustomerID
FROM Orders
WHERE CustomerID IN (SELECT CustomerID FROM Customers WHERE VIPStatus = 1);
3. Correlated Subquery
Scenario: List employees who earn more than the average salary of all employees in the same job title. Query:
sql
Copy code
SELECT EmployeeName, JobTitle, Salary
FROM Employees E
WHERE Salary > (SELECT AVG(Salary) FROM Employees WHERE JobTitle = E.JobTitle);
Key Points to Remember
Scalar Subqueries:

Ideal for single-value calculations.
Can be used in SELECT, WHERE, and HAVING clauses.
Multi-row Subqueries:

Useful with IN, ANY, or ALL operators to match multiple values.
Correlated Subqueries:

Dependent on the outer query.
May have performance implications due to repeated execution.
Common Use Cases:

Filtering records based on calculated or related data.
Validating data against hierarchical or dependent conditions.
Best Practices
Optimize Subqueries:
Use indexes on columns involved in subqueries to enhance performance.
Consider JOINs:
In some cases, replacing subqueries with JOIN operations can improve query efficiency.
Test Correlated Subqueries:
Avoid correlated subqueries for large datasets, as they may slow down query execution.
Subqueries are powerful tools for building complex queries in SQL. Mastering their types and applications will significantly enhance your database querying skills, allowing you to tackle a wide range of real-world scenarios.
